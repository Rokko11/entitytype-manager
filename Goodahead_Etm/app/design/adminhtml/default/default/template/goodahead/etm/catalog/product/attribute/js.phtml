<?php
/**
 * This file is part of Goodahead_Etm extension
 *
 * This extension allows to create and manage custom EAV entity types
 * and EAV entities
 *
 * Copyright (C) 2014 Goodahead Ltd. (http://www.goodahead.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * and GNU General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   Goodahead
 * @package    Goodahead_Etm
 * @copyright  Copyright (c) 2014 Goodahead Ltd. (http://www.goodahead.com)
 * @license    http://www.gnu.org/licenses/lgpl-3.0-standalone.html GNU Lesser General Public License
 */
?>
<script type="text/javascript">
//<![CDATA[

function updateEntityTypeBindings()
{
    if($('matage-options-panel')){
        var panel = $('matage-options-panel');
        if ($('goodahead_etm_entity_type_id')) {
            var entityTypeBind = $('goodahead_etm_entity_type_id');
            if ($('frontend_input') && ($('frontend_input').value=='select' || $('frontend_input').value=='multiselect')) {
                setRowVisibility('goodahead_etm_entity_type_id', true);
                if (entityTypeBind.value != '') {
                    panel.hide();
                } else {
                    panel.show();
                }
            } else {
                setRowVisibility('goodahead_etm_entity_type_id', false);
                if (entityTypeBind.value) {
                    entityTypeBind.value = '';
                }
            }
            updateRequriedOptions();
        }
    }
}

if($('frontend_input')){
    Event.observe($('frontend_input'), 'change', updateEntityTypeBindings);
}

if ($('goodahead_etm_entity_type_id')) {
    Event.observe($('goodahead_etm_entity_type_id'), 'change', updateEntityTypeBindings);
}
updateEntityTypeBindings();

function saveAndContinueEdit(){
    disableElements('save');
    var activeTab = product_attribute_tabsJsTabs.activeTab.id;
    if (editForm.submit($('edit_form').action+'back/edit/tab/' + activeTab) == false) {
        enableElements('save');
    }
    varienGlobalEvents.attachEventHandler('formValidateAjaxComplete', function (){
        enableElements('save');
    });
}

function saveAttribute(){
    disableElements('save');
    if (editForm.submit() == false){
        enableElements('save');
    }
    varienGlobalEvents.attachEventHandler('formValidateAjaxComplete', function (){
        enableElements('save');
    });
}

function toggleApplyVisibility(select) {
    if ($(select).value == 1) {
        $(select).next('select').removeClassName('no-display');
        $(select).next('select').removeClassName('ignore-validate');

    } else {
        $(select).next('select').addClassName('no-display');
        $(select).next('select').addClassName('ignore-validate');
        var options = $(select).next('select').options;
        for( var i=0; i < options.length; i++) {
            options[i].selected = false;
        }
    }
}

function checkOptionsPanelVisibility(){
    if($('matage-options-panel')){
        var panel = $('matage-options-panel');
        var entityTypeBind = $('goodahead_etm_entity_type_id');
        if($('frontend_input') && ($('frontend_input').value=='select' || $('frontend_input').value=='multiselect')){
            if (entityTypeBind && entityTypeBind.value != '') {
                panel.hide();
            } else {
                panel.show();
            }
        }
        else {
            panel.hide();
        }
    }
}

function bindAttributeInputType()
{
    checkOptionsPanelVisibility();
    switchDefaultValueField();
    checkIsConfigurableVisibility();
    if($('frontend_input') && ($('frontend_input').value=='select' || $('frontend_input').value=='multiselect' || $('frontend_input').value=='price')){
        if($('is_filterable') && !$('is_filterable').getAttribute('readonly')){
            $('is_filterable').disabled = false;
        }
        if($('is_filterable_in_search') && !$('is_filterable_in_search').getAttribute('readonly')){
            $('is_filterable_in_search').disabled = false;
        }
        if($('backend_type') && $('backend_type').options){
            for(var i=0;i<$('backend_type').options.length;i++){
                if($('backend_type').options[i].value=='int') $('backend_type').selectedIndex = i;
            }
        }
    }
    else {
        if($('is_filterable')){
            $('is_filterable').selectedIndex=0;
            $('is_filterable').disabled = true;
        }
        if($('is_filterable_in_search')){
            $('is_filterable_in_search').disabled = true;
        }
    }

    if ($('frontend_input') && ($('frontend_input').value=='multiselect'
            || $('frontend_input').value=='gallery'
            || $('frontend_input').value=='textarea')) {
        if ($('used_for_sort_by')) {
            $('used_for_sort_by').disabled = true;
        }
    }
    else {
        if ($('used_for_sort_by') && !$('used_for_sort_by').getAttribute('readonly')) {
            $('used_for_sort_by').disabled = false;
        }
    }

    setRowVisibility('is_wysiwyg_enabled', false);
    setRowVisibility('is_html_allowed_on_front', false);

    switch ($('frontend_input').value) {
        case 'textarea':
            setRowVisibility('is_wysiwyg_enabled', true);
            if($('is_wysiwyg_enabled').value == '0'){
                setRowVisibility('is_html_allowed_on_front', true);
                $('is_html_allowed_on_front').disabled = false;
            }
            $('frontend_class').value = '';
            $('frontend_class').disabled = true;
            break;
        case 'text':
            setRowVisibility('is_html_allowed_on_front', true);
            $('is_html_allowed_on_front').disabled = false;

            if (!$('frontend_class').getAttribute('readonly')) {
                $('frontend_class').disabled = false;
            }
            break;
        case 'select':
        case 'multiselect':
            setRowVisibility('is_html_allowed_on_front', true);
            $('is_html_allowed_on_front').disabled = false;
            break;
        default:
            $('frontend_class').value = '';
            $('frontend_class').disabled = true;
    }

    switchIsFilterable();
}

function switchIsFilterable()
{
    if ($('is_filterable')) {
        if ($('is_filterable').selectedIndex == 0) {
            $('position').disabled = true;
        } else {
            if (!$('position').getAttribute('readonly')){
                $('position').disabled = false;
            }
        }
    }
}

//function disableApplyToValue(value)
//{
//    var applyToSelect = $('apply_to');
//    for (i=0;i<applyToSelect.options.length;i++) {
//        if (value == applyToSelect.options[i].value) {
//            applyToSelect.options[i].disabled = true;
//            applyToSelect.options[i].selected = false;
//        }
//    }
//}

function switchDefaultValueField()
{
    if (!$('frontend_input')) {
        return;
    }

    var currentValue = $('frontend_input').value;

    var defaultValueTextVisibility = false;
    var defaultValueTextareaVisibility = false;
    var defaultValueDateVisibility = false;
    var defaultValueYesnoVisibility = false;
    var scopeVisibility = true;

    switch (currentValue) {
        case 'select':
            optionDefaultInputType = 'radio';
            break;

        case 'multiselect':
            optionDefaultInputType = 'checkbox';
            break;

        case 'date':
            defaultValueDateVisibility = true;
            break;

        case 'boolean':
            defaultValueYesnoVisibility = true;
            break;

        case 'textarea':
            defaultValueTextareaVisibility = true;
            break;

        case 'media_image':
            defaultValueTextVisibility = false;
            break;
        case 'price':
            scopeVisibility = false;
        default:
            defaultValueTextVisibility = true;
            break;
    }

//    var applyToSelect = $('apply_to');
//    switch (currentValue) {
<!--    --><?php //foreach (Mage::helper('catalog')->getAttributeDisabledTypes() as $type=>$disabled): ?>
<!--        case '--><?php //echo $type; ?><!--':-->
<!--            --><?php //foreach ($disabled as $one): ?>
<!--            disableApplyToValue('--><?php //echo $one; ?><!--');-->
<!--            --><?php //endforeach; ?>
//            break;
<!--        --><?php //endforeach; ?>
//        default:
//            for (i=0;i<applyToSelect.options.length;i++) {
//                applyToSelect.options[i].disabled = false;
//            }
//            break;
//    }

    switch (currentValue) {
        case 'media_image':
//            $('front_fieldset').previous().hide();
//            $('front_fieldset').hide();

            setRowVisibility('is_required', false);
            setRowVisibility('is_unique', false);
            setRowVisibility('frontend_class', false);
            break;

    <?php foreach (Mage::helper('catalog')->getAttributeHiddenFields() as $type=>$fields): ?>
        case '<?php echo $type; ?>':
            <?php foreach ($fields as $one): ?>
            <?php if ($one == '_front_fieldset'): ?>
//                $('front_fieldset').previous().hide();
//                $('front_fieldset').hide();
                <?php elseif ($one == '_default_value'): ?>
                defaultValueTextVisibility =
                        defaultValueTextareaVisibility =
                                defaultValueDateVisibility =
                                        defaultValueYesnoVisibility = false;
                <?php elseif ($one == '_scope'): ?>
                scopeVisibility = false;
                <?php else: ?>
                setRowVisibility('<?php echo $one; ?>', false);
                <?php endif; ?>
            <?php endforeach; ?>
            break;
        <?php endforeach; ?>

        default:
//            $('front_fieldset').previous().show();
//            $('front_fieldset').show();
            setRowVisibility('is_required', true);
            setRowVisibility('is_unique', true);
            setRowVisibility('frontend_class', true);
            setRowVisibility('is_configurable', true);
            break;
    }

    setRowVisibility('default_value_text', defaultValueTextVisibility);
    setRowVisibility('default_value_textarea', defaultValueTextareaVisibility);
    setRowVisibility('default_value_date', defaultValueDateVisibility);
    setRowVisibility('default_value_yesno', defaultValueYesnoVisibility);
    setRowVisibility('is_global', scopeVisibility);

    var elems = document.getElementsByName('default[]');
    for (var i = 0; i < elems.length; i++) {
        elems[i].type = optionDefaultInputType;
    }
}

function setRowVisibility(id, isVisible)
{
    if ($(id)) {
        var td = $(id).parentNode;
        var tr = $(td.parentNode);

        if (isVisible) {
            tr.show();
        } else {
            tr.blur();
            tr.hide();
        }
    }
}

function checkIsConfigurableVisibility()
{
    if (!$('is_configurable') || !$('is_global') || !$('frontend_input')) return;
    if ($F('is_global')==1 && $F('frontend_input')=='select') {
        setRowVisibility('is_configurable', true);
    } else {
        setRowVisibility('is_configurable', false);
    }
}

function updateRequriedOptions()
{
    if ($F('frontend_input')=='select' && $F('is_required')==1) {
        if ($('goodahead_etm_entity_type_id') && $('goodahead_etm_entity_type_id').value!='') {
            $('option-count-check').removeClassName('required-options-count');
        } else {
            $('option-count-check').addClassName('required-options-count');
        }
    } else {
        $('option-count-check').removeClassName('required-options-count');
    }
}

if($('frontend_input')){
    Event.observe($('frontend_input'), 'change', updateRequriedOptions);
    Event.observe($('frontend_input'), 'change', bindAttributeInputType);
    Event.observe($('is_global'), 'change', checkIsConfigurableVisibility);
}

if ($('is_filterable')) {
    Event.observe($('is_filterable'), 'change', switchIsFilterable);
}

if ($('is_required')) {
    Event.observe($('is_required'), 'change', updateRequriedOptions);
}
bindAttributeInputType();

//]]>
</script>
